{{define "EVREST"}}
package {{.Package}}
import(
    {{imports .Imports}}
)

var VERSION = "{{.Version}}"

var flags *flag.FlagSet
var separator string = "----------------------------------------"
var command string = ""
{{commandFlagsVars .Commands}}

func {{.UsageFunc}}(){
	fmt.Println(`{{commandUsage .Commands .}}`)
}

{{template "EVHttpHandler" .}}
{{template "EVRestHttpHandler" .}}

func init() {
	if len(os.Args) <= 1 {
		{{.UsageFunc}}()
		fmt.Println(separator)
		os.Exit(2)
	}
	command = os.Args[1]
	flags = flag.NewFlagSet(command, flag.ExitOnError)
	{{commandFlags .Commands}}
	flags.Usage = {{.UsageFunc}}
	{{if .USE_PROMETHEUS}}
	PromInit()
	{{end}}
}

func main(){
    flags.Parse(os.Args[2:])
	if debug {
		eve.SetDebug(true)
	}

	if address == "" {
		address = "{{.DefaultAddress}}"
	}

	ro := NewRestHttpHandler()
	r := mux.NewRouter()
	s := r.PathPrefix("{{.ROUTE_PATH_PREFIX}}").Subrouter()
	s.Handle("/", ro){{range $idx, $url := .URLS}}
	s.Handle("{{$url}}", ro){{end}}
	r.Handle("/", NewHttpHandler())
	http.Handle("/assets/", http.StripPrefix("/assets/", http.FileServer(http.Dir(evwebroot))))
	http.Handle("/", r)

	switch command {

	case "help":
		if hhttp != "" {
			fmt.Println("running http service at", hhttp)
			fmt.Println("help is now available at ::", "http://" + hhttp + "{{.ROUTE_PATH_PREFIX}}help")
			log.Fatal(http.ListenAndServe(hhttp, nil))
		} else {
			{{.UsageFunc}}()
			fmt.Println(separator)
			os.Exit(2)
		}

	case "http":
		fmt.Println("running http service at", address)
		fmt.Println("root assets are served from webroot", webroot)
		fmt.Println("service specific assets are served from evwebroot", evwebroot)
	case "https":
		fmt.Println("running https service at", address, "with cert", crt, "and key", key)
		fmt.Println("root assets are served from webroot", webroot)
		fmt.Println("service specific assets are served from evwebroot", evwebroot)
	case "version":
		fmt.Println("version " + VERSION)
		os.Exit(0)

	default:
		fmt.Println(separator)
		fmt.Println("the given command", command, "is not supported now")
		{{.UsageFunc}}()
		fmt.Println(separator)
		os.Exit(2)
	}
}
{{end}}
