{{define "EVRestSchedule"}}
type Scheduler struct {
    EVSched *eve.Scheduler
}

// RESTGetCommand
func (s *Scheduler) RESTGetCommand(w http.ResponseWriter, r *http.Request) error {
	w.WriteHeader(200)
	w.Write([]byte("RESTGetCommand"))
	return nil
}

// RESTAppendCommand
func (s *Scheduler) RESTAppendCommand(w http.ResponseWriter, r *http.Request) error {
	{{if .DEBUG}}
		fmt.Println(r.FormValue("Cmd"))
		fmt.Println(r.FormValue("Args"))
	{{end}}
	err := s.EVSched.AppendServiceCmd(r.FormValue("Cmd"), strings.Split(r.FormValue("Args"), ","))
	if err != nil{
		w.WriteHeader(500)
		w.Write([]byte(err.Error()))
	}
	w.WriteHeader(200)
	w.Write([]byte("OK"))
	return nil
}

// RESTUpdateCommand will update a running command in the Scheduler Running map
func (s *Scheduler) RESTUpdateCommand(w http.ResponseWriter, r *http.Request) error {
	switch r.FormValue("Mode") {
	case "Append.Process":
		return s.RESTAppendCommand(w, r)
	case "Start.Processes":
		return s.RESTServicesStart(w, r)
	case "Stop.Processes":
		return s.RESTServicesStop(w, r)
	case "Start.Process":
		return s.RESTServicesStart(w, r)
	case "Kill.Process":
		return s.RESTServiceStop(w, r)
	case "Restart.Process":
		return s.RESTServiceRestart(w, r)
	case "Shutdown":
		return s.RESTShutdown(w, r)
	}
	return errors.New("No Mode was choosen please use one the following modes: Replace.Process|Kill.Process|Kill.Processes|Start.Process|Start.Processes|Shutdown")
}

// RESTDeleteCommand
func (s *Scheduler) RESTDeleteCommand(w http.ResponseWriter, r *http.Request) error {
	w.WriteHeader(200)
	w.Write([]byte("RESTDeleteCommand"))
	return nil
}

// RESTServicesStop 
func (s *Scheduler) RESTServicesStop(w http.ResponseWriter, r *http.Request) error {
	return s.EVSched.ServicesStop()
}

// RESTServicesStart
func (s *Scheduler) RESTServicesStart(w http.ResponseWriter, r *http.Request) error {
	err := s.EVSched.ServicesRun(s.EVSched.WaitGroup())
	if err != nil {
		return err
	}
	w.WriteHeader(200)
	w.Write([]byte("OK"))
	return nil
}

// RESTServiceStop
func (s *Scheduler) RESTServiceStop(w http.ResponseWriter, r *http.Request) error {
	{{if .DEBUG}}
		fmt.Println(r.FormValue("Id"))
	{{end}}
	ID, err := strconv.Atoi(r.FormValue("Id"))
	if err != nil{
		w.WriteHeader(500)
		w.Write([]byte(err.Error()))
	}
	return s.EVSched.ServiceStop(ID)
}

// RESTServiceRestart
func (s *Scheduler) RESTServiceRestart(w http.ResponseWriter, r *http.Request) error {
	{{if .DEBUG}}
		fmt.Println(r.FormValue("Id"))
		fmt.Println(r.FormValue("cmd"))
		fmt.Println(r.FormValue("args"))
	{{end}}
	ID, err := strconv.Atoi(r.FormValue("Id"))
	if err != nil{
		w.WriteHeader(500)
		w.Write([]byte(err.Error()))
	}
	return s.EVSched.ServiceRestart(ID, r.FormValue("cmd"), strings.Split(r.FormValue("args"), ","))
}

// RESTShutdown 
func (s *Scheduler) RESTShutdown(w http.ResponseWriter, r *http.Request) error {
	return s.EVSched.Shutdown()
}

var EVSchedulerObj *Scheduler = &Scheduler{
    EVSched: eve.NewScheduler(),
}

{{end}}
