{{define "HttpRestConnectEVSecret"}}

var EVSecretStorage = "{{.SECRET_STORAGE_URL}}"
var EVSecretStorageDB =  "{{.SECRET_STORAGE_DB}}"
var EVSecretStorageBucket = "{{.SECRET_STORAGE_BUCKET}}"
var EVSecretEncKey = "{{.SECRET_ENC_KEY}}"
var EVSecretSigKey = "{{.SECRET_SIG_KEY}}"

type EVSecretProvider struct{}

func (sp *EVSecretProvider) SecretGet() (encSecret string, sigSecret string, err error){
    resp,err := EVSecretGet(EVSecretEncKey)
    if err != nil{
        return "","",err
    }
    enc,err := eve.ResponseBodyAll(resp)
    log.Println(string(enc))
    if err != nil{
        return "","",err
    }
    resp,err = EVSecretGet(EVSecretSigKey)
    if err != nil{
        return "","",err
    }
    sig,err := eve.ResponseBodyAll(resp)
     log.Println(string(sig))
    if err != nil{
        return "","",err
    }
    return string(enc), string(sig), nil
}

func EVSecretSave(id , message string) (*http.Response, error){
    return eve.EVHttpSendForm(http.MethodPost, EVSecretStorage, url.Values{"database": {EVSecretStorageDB}, "bucket": {EVSecretStorageBucket}, "key": {id}, "message": {message}, "evbolt.msgtype":{"string"}})
}

func EVSecretGet(id string) (*http.Response,error){
    return eve.EVHttpReceive(http.MethodGet, EVSecretStorage, url.Values{"database":{EVSecretStorageDB}, "bucket":{EVSecretStorageBucket}, "evbolt.data":{"key"}, "evbolt.keytype":{"c"}, "key":{id}})
}

func EVSecretDelete(id string)(*http.Response,error){
    return eve.EVHttpReceive(http.MethodDelete, EVSecretStorage, url.Values{"database":{EVSecretStorageDB}, "bucket":{EVSecretStorageBucket}, "evbolt.data":{"key"}, "evbolt.keytype":{"c"}, "key":{id}})
}

{{end}}
