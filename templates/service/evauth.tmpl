{{define "EVAuthRestApi"}}
    switch r.URL.Path{
        case "{{.ROUTE_PATH_PREFIX}}access.json":
            format = "json"
            r.URL.Path = "{{.ROUTE_PATH_PREFIX}}access"
        case "{{.ROUTE_PATH_PREFIX}}access.html":
            format = "html"
            r.URL.Path = "{{.ROUTE_PATH_PREFIX}}access"
        case "{{.ROUTE_PATH_PREFIX}}login.json":
            format = "json"
            r.URL.Path = "{{.ROUTE_PATH_PREFIX}}login"
        case "{{.ROUTE_PATH_PREFIX}}login.html":
            format = "html"
            r.URL.Path = "{{.ROUTE_PATH_PREFIX}}login"
        case "{{.ROUTE_PATH_PREFIX}}logout.json":
            format = "json"
            r.URL.Path = "{{.ROUTE_PATH_PREFIX}}logout"
        case "{{.ROUTE_PATH_PREFIX}}logout.html":
            format = "html"
            r.URL.Path = "{{.ROUTE_PATH_PREFIX}}logout"
        default:
            format = "text"
            ext :=  path.Ext(r.URL.Path)
            if ext != "" {
                r.URL.Path = strings.Replace(r.URL.Path, ext, "", -1)
            }
    }
    if r.URL.Path == "{{.ROUTE_PATH_PREFIX}}access" {
        // check for authenticatio token
        if r.Header.Get("Authorization") != "" && strings.Contains(r.Header.Get("Authorization"), "Bearer"){
            sp := new(EVSecretProvider)
            enc, sig, err := sp.SecretGet()
            if err != nil {
                eve.ReturnErrorMessage(w, 500, err, format)
                return
            }
            token := strings.Split(r.Header.Get("Authorization")," ")
            expired, err := eve.TokenIsExpired(token[1], enc, sig)
            if err != nil {
                eve.ReturnErrorMessage(w, 500, err, format)
                return
            }
            if ! expired {
                eve.ReturnResult(w, 200, "success", format)
                return
            }
        }

        // check if there are a basic authentication information available
        email,pass,ok := r.BasicAuth()
        if ok {
            if EVUserValidateCredentials(email, pass){
                eve.ReturnResult(w, 200, "success", format)
                return
            }
        }

        // check for email and password as post values
        if (r.FormValue("email") != "" && r.FormValue("password") != "") {
            if EVUserValidateCredentials(r.FormValue("email"), r.FormValue("password")){
                eve.ReturnResult(w, 200, "success", format)
                return
            }
        }

        // if nothing works try if there is a valid cookie
        c,err := r.Cookie("EVToken")
        if err != nil {
            eve.ReturnErrorMessage(w, 403, errors.New("Forbidden"), format)
            return
        }
        log.Println("cookie::::",c)
        sp := new(EVSecretProvider)
        enc, sig, err := sp.SecretGet()
        if err != nil {
            eve.ReturnErrorMessage(w, 500, err, format)
            return
        }
        expired, err := eve.TokenIsExpired(c.Value, enc, sig)
        if err != nil {
            eve.ReturnErrorMessage(w, 500, err, format)
            return
        }
        if ! expired {
            eve.ReturnResult(w, 200, "success", format)
            return
        }
        eve.ReturnErrorMessage(w, 403, errors.New("Forbidden"), format)
        return
    }

    if r.URL.Path == "{{.ROUTE_PATH_PREFIX}}login" {
        // get form data to login user
        email := r.FormValue("email")
        pass := r.FormValue("password")
        // if no form data was provided
        if email == "" && pass == "" {
            // try to get basic auth email and pass
            email,pass,_ = r.BasicAuth()
        }
        if !EVUserValidateCredentials(email, pass) {
            eve.ReturnErrorMessage(w, 403, errors.New("Forbidden"), format)
            return
        }
        // if user has successfullry validate the credentials get token credentials from storage
        sp := new(EVSecretProvider)
        enc, sig, err := sp.SecretGet()
        if err != nil {
            eve.ReturnErrorMessage(w, 500, err, format)
            return
        }
        sessId := uniuri.NewLen(16)
        // save the session for all other services
        res, err := EVSessionSave(sessId, EVUserUid(email))
        if err != nil {
            eve.ReturnErrorMessage(w, 500, err, format)
            return
        }
        if res.StatusCode != 200{
            eve.ReturnErrorMessage(w, 500, err, format)
            return
        }
        // create token content message
        tokenProps := map[string]string{"u": EVUserUid(email), "c": time.Now().Format("2006-01-02 15:04:05.999999999 -0700 MST"), "e": time.Now().AddDate(0, 0, {{.TOKEN_EXP_DAYS}}).Format("2006-01-02 15:04:05.999999999 -0700 MST"), "t": "", "s": sessId}
        tMessage, err := eve.PlainToken(tokenProps)
        log.Println(tMessage)
        if err != nil {
            eve.ReturnErrorMessage(w, 500, err, format)
            return
        }
        // create the token for the user authorization header
        token, err := eve.TokenCreate(tMessage, enc, sig)
        if err != nil {
            eve.ReturnErrorMessage(w, 500, err, format)
            return
        }
        // save the token for all the other services in plaintext into the storage
        res, err = EVTokenSave(EVUserUid(email), tMessage)
        if err != nil {
            eve.ReturnErrorMessage(w, 500, err, format)
            return
        }
        logg,err := eve.ResponseBodyAll(res)
        if err != nil {
            eve.ReturnErrorMessage(w, 500, err, format)
            return
        }
        log.Println("logg ::: ",string(logg))

        // write the token into the header
        w.Header().Add("Authorization", "Bearer "+token)

        now, err := timeZoneLocationTime("{{.TIME_ZONE_LOCATION}}")
		if err != nil {
			eve.ReturnErrorMessage(w, 500, err, format)
			return
		}

        // set token as cookie
        http.SetCookie(w, &http.Cookie{
            Name: "EVToken",
            Value: token,
            Path: "/",
            Domain: "",
            Expires: now.Add((time.Minute * {{.COOKIE_EXP_MINUTES}})),
        })
        eve.ReturnResult(w, 200, "success", format)
        return
    }

     if r.URL.Path == "{{.ROUTE_PATH_PREFIX}}logout" {
        email := r.FormValue("email")
        res, err := EVUserDelete(EVUserUid(email))
        if err != nil {
            eve.ReturnErrorMessage(w, 500, err, format)
            return
        }
        logg,err := eve.ResponseBodyAll(res)
        if err != nil {
            eve.ReturnErrorMessage(w, 500, err, format)
            return
        }
        log.Println(string(logg))
    }

{{end}}