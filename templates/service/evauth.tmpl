{{define "EVAuthRestApi"}}

    if r.URL.Path == "{{.ROUTE_PATH_PREFIX}}access" {
        // check for authenticatio token
        if r.Header.Get("Authorization") != "" {
            log.Println(r.Header.Get("Authorization"))
            sp := new(EVSecretProvider)
            enc, sig, err := sp.SecretGet()
            if err != nil {
                w.WriteHeader(500)
                w.Write([]byte("500"))
                return
            }
            token := strings.Split(r.Header.Get("Authorization")," ")
            expired, err := eve.TokenIsExpired(token[1], enc, sig)
            if err != nil {
                w.WriteHeader(500)
                w.Write([]byte(err.Error()))
                return
            }
            if ! expired {
                w.WriteHeader(200)
                w.Write([]byte("OK"))
                return
            }
        }
        if (r.FormValue("email") != "" && r.FormValue("password") != "") {
            if EVUserValidateCredentials(r.FormValue("email"), r.FormValue("password")){
                w.WriteHeader(200)
                w.Write([]byte("OK"))
                return
            }
        }

        // if nothing works try if there is a valid cookie
        c,err := r.Cookie("EVToken")
        if err != nil {
            w.WriteHeader(403)
            w.Write([]byte("Forbidden"))
            return
        }
        log.Println("cookie::::",c)
        sp := new(EVSecretProvider)
        enc, sig, err := sp.SecretGet()
        if err != nil {
            w.WriteHeader(500)
            w.Write([]byte("500"))
            return
        }
        expired, err := eve.TokenIsExpired(c.Value, enc, sig)
        if err != nil {
            w.WriteHeader(500)
            w.Write([]byte(err.Error()))
            return
        }
        if ! expired {
            w.WriteHeader(200)
            w.Write([]byte("OK"))
            return
        }
        w.WriteHeader(403)
        w.Write([]byte("Forbidden"))
        return
    }

    if r.URL.Path == "{{.ROUTE_PATH_PREFIX}}login" {
        log.Println("1")
        if !EVUserValidateCredentials(r.FormValue("email"), r.FormValue("password")) {
            w.WriteHeader(403)
	        w.Write([]byte("Forbidden"))
            return
        }
        log.Println("2")
        log.Println("3")
        // if user has successfullry validate the credentials get token credentials from storage
        sp := new(EVSecretProvider)
        enc, sig, err := sp.SecretGet()
        if err != nil {
            w.WriteHeader(500)
	        w.Write([]byte("500"))
            return
        }
        log.Println("4")
        sessId := uniuri.NewLen(16)
        // save the session for all other services
        res, err := EVSessionSave(sessId, EVUserUid(r.FormValue("email")))
        if err != nil {
            w.WriteHeader(500)
	        w.Write([]byte("500"))
            return
        }
        log.Println("5")
        if res.StatusCode != 200{
            w.WriteHeader(500)
	        w.Write([]byte("500"))
            return
        }
        log.Println("6")
        // create token content message
        tokenProps := map[string]string{"u": EVUserUid(r.FormValue("email")), "c": time.Now().Format("2006-01-02 15:04:05.999999999 -0700 MST"), "e": time.Now().AddDate(0, 0, {{.TOKEN_EXP_DAYS}}).Format("2006-01-02 15:04:05.999999999 -0700 MST"), "t": "", "s": sessId}
        tMessage, err := eve.PlainToken(tokenProps)
        log.Println(tMessage)
        if err != nil {
            w.WriteHeader(500)
	        w.Write([]byte("500"))
            return
        }
        log.Println("7")
        // create the token for the user authorization header
        token, err := eve.TokenCreate(tMessage, enc, sig)
        if err != nil {
            w.WriteHeader(500)
	        w.Write([]byte("500"))
            return
        }
        log.Println("8")
        // save the token for all the other services in plaintext into the storage
        res, err = EVTokenSave(EVUserUid(r.FormValue("email")), tMessage)
        if err != nil {
            w.WriteHeader(500)
	        w.Write([]byte("500"))
            return
        }
        log.Println("9")
        logg,err := eve.ResponseBodyAll(res)
        if err != nil {
            w.WriteHeader(500)
	        w.Write([]byte("500"))
            return
        }
        log.Println("1!")
        log.Println(string(logg))

        // write the token into the header
        w.Header().Add("Authorization", "Bearer "+token)

        // set token as cookie
        http.SetCookie(w, &http.Cookie{
            Name: "EVToken",
            Value: token,
            Path: "/",
            Domain: "",
            Expires: time.Now().Add((time.Minute * {{.COOKIE_EXP_MINUTES}})),
        })
        log.Println("12")
        w.WriteHeader(200)
        w.Write([]byte("OK"))
        return
    }

     if r.URL.Path == "{{.ROUTE_PATH_PREFIX}}logout" {
        res, err := EVUserDelete(EVUserUid(r.FormValue("email")))
        if err != nil {
            w.WriteHeader(500)
	        w.Write([]byte("500"))
            return
        }
        logg,err := eve.ResponseBodyAll(res)
        if err != nil {
            w.WriteHeader(500)
	        w.Write([]byte("500"))
            return
        }
        log.Println(string(logg))
    }

{{end}}